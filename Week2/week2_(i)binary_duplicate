question :-Given a sorted array of positive integers containing few duplicate elements, design an algorithm and implement it using a program to find whether the given key element is present in the array or not. If present, then also find the number of copies of given key. (Time Complexity = O(log n))
ans:-
#include<iostream>
using namespace std;
int binaryduplicte(int arr[],int n,int key)
{
    int first=-1;
   int start=0;
   int end=n-1;
    while(start<=end)
    {
      int mid=start+(end-start)/2;
      if(arr[mid]==key)
      {
         first=mid;
         end=mid-1;
      }
      else if(arr[mid]<key)
      {
        start=mid+1;
      }
      else 
      {
        end=mid-1;
      }
    }
    if (first==-1)
      {
        return -1;
      }
    int last=-1;
    start=0;
    end=n-1;
    while(start<=end)
    {
      int mid=start+(end-start)/2;
      if(arr[mid]==key)
      {
         last=mid;
         start=mid+1;
      }
      else if(arr[mid]<key)
      {
        start=mid+1;
      }
      else
      {
        end=mid-1;
      }
    }
    int count=last-first+1;
    return count; 
}
int main()
{
    int arr[13]={1,2,3,4,5,5,5,5,6,6,6,7,8};
    int n=13;
    int key;
    cout<<"enter the key";
    cin>>key;
    int count;
   count= binaryduplicte(arr,n,key);
   if(count==-1)
   {
    cout<<"key not present";
   }
   else 
   {
    cout<<"key is present and its occurance is "<<count;
   }
}
