question:-Given an unsorted array of integers, design an algorithm and a program to sort the array using insertion sort. Your program should be able to find number of comparisons and shifts ( shifts - total number of times the array elements are shifted from their place) required for sorting the array.
ans:-
insertion sort:-
4|,7,8,1,3,0,6,2,5,9
round 1:-(4 is already sorted so leave it do sorting from index 1 and compare it from the lesser elements and then place it in its correct postion)
4,7|,8,1,3,0,6,2,5,9
round 2:
4,7,8|,1,3,0,6,2,5,9
round3:-
1,4,7,8|,3,0,6,2,5,9
round 4:-
1,3,4,7,8|,0,6,2,5,9
round 5:-
0,1,3,4,7,8|,6,2,5,9
round 6:-
0,1,3,4,6,7,8|,2,5,9
round 7:-
0,1,2,3,4,6,7,8|,5,9
round8:-
0,1,2,3,4,5,6,7,8|,9
round 9:-
0,1,2,3,4,5,6,7,8,9|
here is the code------------------------------------------------------------------------------
#include<iostream>
using namespace std;
 void insertion_sort(int arr[],int n)
 {
    int compare=0;
    int shift=0;
    int temp;
    for(int i=1;i<n;i++)
    {
        for(int j=i;j>0;j--)
        {
            compare++;
            if(arr[j]<arr[j-1])
            {
                temp=arr[j];
                arr[j]=arr[j-1];
                arr[j-1]=temp;
                shift++;
            }
            else 
            {
                break;
            }
        }
    }
    cout<<"sorted array is ";
    for(int i=0;i<n;i++)
    {
        cout<<arr[i];
    }
    cout<<endl;
    cout<<"number of sifts are"<<shift<<endl;
cout<<"number of compare"<<compare;
 }
int main()
{
    int arr[10]={4,7,8,1,3,0,6,2,5,9};
    int n=10;
    insertion_sort(arr,n);
}
