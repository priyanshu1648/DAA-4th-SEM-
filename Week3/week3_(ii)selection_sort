question:-Given an unsorted array of integers, design an algorithm and implement a program to sort this array using selection sort. Your program should also find number of comparisons and number of swaps required.
ans:-selection sort
9,3,2,8,6,4,5,0,1,7
round1:-find the smallest element in the array and sawp it with the first element then again find the smallest one (leave 1st index which is already sorted and second whith whome you will swap)and swap it with second one repeate this process
0|3,2,8,6,4,5,9,1,7
round2:-
0,1|2,8,6,4,5,9,3,7
round 3:-
0,1,2|8,6,4,5,9,3,7(no swapping)
round 4:-
0,1,2,3|6,4,5,9,8,7
round5:-
0,1,2,3,4|6,5,9,8,7
round6:-
0,1,2,3,4,5,|6,9,8,7
round7:-
0,1,2,3,4,5,6,|9,8,7(no swaping)
round8:-
0,1,2,3,4,5,6,7,|8,9
round9:-
0,1,2,3,,4,5,6,7,8|9(no swaping and loop will end here as we dont need to check for last one)
here is code---------------------------------------------------------------------------------------------------------------------------------------------------------
#include<iostream>
using namespace std;
void selection_sort(int arr[],int n)
{
    int compare=0;
    int shift=0;
    int temp;
    for(int i=0;i<n-1;i++)
    {
       int index=i;
        for(int j=i+1;j<n;j++)
        {
               compare++;
            if(arr[index]>arr[j])
            {
                index=j;
            }
        }
        if(i!=index){
            temp=arr[i];
            arr[i]=arr[index];
            arr[index]=temp;
            shift++;
        }
            
    }
    cout<<" sorted array is";
    for(int i=0;i<n;i++)
    {
        cout<<arr[i];
    }
    cout<<endl;
    cout<<"number of shifts"<<shift<<endl;
    cout<<"number of compare"<<compare;
}
int main()
{
    int arr[10]={9,3,2,8,6,4,5,0,1,7};
    int n=10;
    selection_sort(arr,n);
}
